document.addEventListener("DOMContentLoaded", () => {
  const links = document.querySelectorAll(".menu-link");
  const content = document.getElementById("accountContent");

  // Khi click v√†o menu
  links.forEach((link) => {
    link.addEventListener("click", async (event) => {
      event.preventDefault(); // ‚ùå NgƒÉn load trang

      const url = link.getAttribute("href");

      try {
        // üü¢ D√πng fetch ƒë·ªÉ t·∫£i file HTML con
        const response = await fetch(url);
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i n·ªôi dung");
        const html = await response.text();

        // üß© Thay n·ªôi dung v√†o khu v·ª±c content
        content.innerHTML = html;

        // üé® Highlight menu ƒëang ch·ªçn
        links.forEach((l) => l.parentElement.classList.remove("active"));
        link.parentElement.classList.add("active");
      } catch (error) {
        content.innerHTML = `<p class="text-danger">L·ªói t·∫£i n·ªôi dung: ${error.message}</p>`;
      }
    });
  });

  // T·ª± ƒë·ªông load m·ª•c ƒë·∫ßu ti√™n khi v√†o trang
  if (links.length > 0) {
    links[0].click();
  }
});

/**
 * API Host cho vi·ªác l·∫•y d·ªØ li·ªáu ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam.
 */
const ADDRESS_API_HOST = "https://provinces.open-api.vn/api/";

/**
 * H√†m g·ªçi API chung, h·ªó tr·ª£ JSON v√† c√°c ph∆∞∆°ng th·ª©c kh√°c.
 * @param {string} url - URL ƒë·∫ßy ƒë·ªß c·ªßa API c·∫ßn g·ªçi.
 * @param {object} options - (T√πy ch·ªçn) C√°c t√πy ch·ªçn cho fetch (method, headers, body).
 * @returns {Promise<any>}
 */
const callApi = (url, options = {}) => {
  return fetch(url, options).then((response) => {
    if (!response.ok) {
      return response.json().then((err) => {
        throw new Error(err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      });
    }
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      return response.json();
    }
    return response.text();
  });
};

/**
 * Hi·ªÉn th·ªã danh s√°ch t·ªânh/th√†nh ph·ªë ra dropdown.
 * @param {string} selectedProvinceName - (T√πy ch·ªçn) T√™n t·ªânh c·∫ßn ƒë∆∞·ª£c ch·ªçn s·∫µn.
 */
const renderProvinces = async (selectedProvinceName = "") => {
  const citySelect = document.getElementById("city");
  if (!citySelect) return;
  try {
    const provinces = await callApi(ADDRESS_API_HOST + "?depth=1");
    let html = "<option value=''>Ch·ªçn T·ªânh/Th√†nh ph·ªë</option>";
    provinces.forEach((province) => {
      const isSelected =
        province.name === selectedProvinceName ? "selected" : "";
      html += `<option value='${province.code}' ${isSelected}>${province.name}</option>`;
    });
    citySelect.innerHTML = html;
  } catch (error) {
    console.error("L·ªói khi t·∫£i danh s√°ch t·ªânh/th√†nh:", error);
  }
};

/**
 * Hi·ªÉn th·ªã danh s√°ch qu·∫≠n/huy·ªán ra dropdown.
 * @param {string} provinceCode - M√£ c·ªßa t·ªânh/th√†nh ph·ªë.
 * @param {string} selectedDistrictName - (T√πy ch·ªçn) T√™n qu·∫≠n/huy·ªán c·∫ßn ƒë∆∞·ª£c ch·ªçn s·∫µn.
 */
const renderDistricts = async (provinceCode, selectedDistrictName = "") => {
  const districtSelect = document.getElementById("district");
  if (!districtSelect) return;
  try {
    const provinceData = await callApi(
      `${ADDRESS_API_HOST}p/${provinceCode}?depth=2`
    );
    let html = "<option value=''>Ch·ªçn Qu·∫≠n/Huy·ªán</option>";
    provinceData.districts.forEach((district) => {
      const isSelected =
        district.name === selectedDistrictName ? "selected" : "";
      html += `<option value='${district.code}' ${isSelected}>${district.name}</option>`;
    });
    districtSelect.innerHTML = html;
  } catch (error) {
    console.error("L·ªói khi t·∫£i danh s√°ch qu·∫≠n/huy·ªán:", error);
  }
};

/**
 * Hi·ªÉn th·ªã danh s√°ch ph∆∞·ªùng/x√£ ra dropdown.
 * @param {string} districtCode - M√£ c·ªßa qu·∫≠n/huy·ªán.
 * @param {string} selectedWardName - (T√πy ch·ªçn) T√™n ph∆∞·ªùng/x√£ c·∫ßn ƒë∆∞·ª£c ch·ªçn s·∫µn.
 */
const renderWards = async (districtCode, selectedWardName = "") => {
  const wardSelect = document.getElementById("ward");
  if (!wardSelect) return;
  try {
    const districtData = await callApi(
      `${ADDRESS_API_HOST}d/${districtCode}?depth=2`
    );
    let html = "<option value=''>Ch·ªçn Ph∆∞·ªùng/X√£</option>";
    districtData.wards.forEach((ward) => {
      const isSelected = ward.name === selectedWardName ? "selected" : "";
      html += `<option value='${ward.code}' ${isSelected}>${ward.name}</option>`;
    });
    wardSelect.innerHTML = html;
  } catch (error) {
    console.error("L·ªói khi t·∫£i danh s√°ch ph∆∞·ªùng/x√£:", error);
  }
};

/**
 * Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán 'change' cho c√°c dropdown ƒë·ªãa ch·ªâ ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng n·ªëi ti·∫øp.
 */
const setupAddressEvents = () => {
  const citySelect = document.getElementById("city");
  const districtSelect = document.getElementById("district");
  const wardSelect = document.getElementById("ward");
  if (!citySelect || !districtSelect || !wardSelect) return;
  citySelect.addEventListener("change", () => {
    if (citySelect.value) renderDistricts(citySelect.value);
    wardSelect.innerHTML = "<option value=''>Ch·ªçn Ph∆∞·ªùng/X√£</option>";
  });
  districtSelect.addEventListener("change", () => {
    if (districtSelect.value) renderWards(districtSelect.value);
  });
};

/**
 * H√†m fetch th√¥ng tin ng∆∞·ªùi d√πng v√† ƒëi·ªÅn v√†o bi·ªÉu m·∫´u.
 */
async function loadAccountDetails() {
  // L·∫•y userId t·ª´ localStorage (gi·∫£ s·ª≠ ƒë∆∞·ª£c l∆∞u khi login)
  const userId = "60d21b4667d0d8992e610a02";
  // const userId = localStorage.getItem("userId"); // Fallback n·∫øu kh√¥ng c√≥
  const userApiUrl = `http://localhost:8585/api/v1/users/find?id=${userId}`;
  try {
    const data = await callApi(userApiUrl);
    if (data.code === 10000 && data.result) {
      const userData = data.result;
      const userAddress = userData.address || {};
      document.getElementById("customerName").value = userData.name || "";
      document.getElementById("email").value = userData.email || "";
      document.getElementById("phone").value = userData.phoneNumber || "";
      document.getElementById("taxId").value = userData.taxId || "";
      document.getElementById("street").value = userAddress.other || "";
      document.getElementById("address").value = userAddress.other || "";
      await renderProvinces(userAddress.province);
      const citySelect = document.getElementById("city");
      if (citySelect.value) {
        await renderDistricts(citySelect.value, userAddress.district);
      }
      const districtSelect = document.getElementById("district");
      if (districtSelect.value) {
        await renderWards(districtSelect.value, userAddress.ward);
      }
    } else {
      console.error("API ng∆∞·ªùi d√πng tr·∫£ v·ªÅ l·ªói:", data.message);
    }
  } catch (error) {
    console.error("L·ªói khi g·ªçi API ng∆∞·ªùi d√πng:", error);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng. Vui l√≤ng ki·ªÉm tra l·∫°i API.");
  }
}

/**
 * Thu th·∫≠p d·ªØ li·ªáu t·ª´ form v√† g·ª≠i y√™u c·∫ßu UPDATE l√™n API.
 * @param {Event} event - S·ª± ki·ªán submit c·ªßa form.
 */
async function handleUpdateUser(event) {
  event.preventDefault();
  // L·∫•y userId t·ª´ localStorage (gi·∫£ s·ª≠ ƒë∆∞·ª£c l∆∞u khi login)
  const userId = "60d21b4667d0d8992e610a02";
  // const userId = localStorage.getItem("userId"); // Fallback n·∫øu kh√¥ng c√≥
  const updateUserApiUrl = `http://localhost:8585/api/v1/users/update/${userId}`;
  const citySelect = document.getElementById("city");
  const districtSelect = document.getElementById("district");
  const wardSelect = document.getElementById("ward");
  const updatedData = {
    name: document.getElementById("customerName").value,
    email: document.getElementById("email").value,
    phoneNumber: document.getElementById("phone").value,
    taxId: document.getElementById("taxId").value,
    address: {
      province: citySelect.options[citySelect.selectedIndex]?.text || "",
      district:
        districtSelect.options[districtSelect.selectedIndex]?.text || "",
      ward: wardSelect.options[wardSelect.selectedIndex]?.text || "",
      other: document.getElementById("street").value,
    },
  };
  console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(updatedData, null, 2));
  try {
    const response = await callApi(updateUserApiUrl, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedData),
    });
    alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
    console.log("Ph·∫£n h·ªìi t·ª´ server:", response);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:", error);
    alert(`C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t: ${error.message}`);
  }
}

/**
 * G·∫Øn s·ª± ki·ªán 'submit' cho form ƒë·ªÉ g·ªçi h√†m handleUpdateUser.
 */
const setupSaveButtonEvent = () => {
  const userForm = document.querySelector(".container form");
  if (userForm) {
    userForm.addEventListener("submit", handleUpdateUser);
  }
};

/**
 * X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u.
 * @param {Event} event - S·ª± ki·ªán submit c·ªßa form.
 */
async function handleChangePassword(event) {
  event.preventDefault();
  const currentPassword = document.getElementById("currentPassword").value;
  const newPassword = document.getElementById("newPassword").value;
  const confirmPassword = document.getElementById("confirmPassword").value;

  // Validate
  if (!currentPassword || !newPassword || !confirmPassword) {
    alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    return;
  }
  if (newPassword !== confirmPassword) {
    alert("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
    return;
  }
  if (newPassword.length < 6) {
    alert("M·∫≠t kh·∫©u m·ªõi ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±.");
    return;
  }

  // L·∫•y userId
  const userId = "60d21b4667d0d8992e610a02"; // Ho·∫∑c localStorage.getItem("userId")
  const changePasswordApiUrl = `http://localhost:8585/api/v1/users/update/${userId}/password`;

  try {
    const response = await callApi(changePasswordApiUrl, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        oldPassword: currentPassword,
        newPassword: newPassword,
      }),
    });
    alert("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
    // Reset form
    document.getElementById("changePasswordForm").reset();
  } catch (error) {
    console.error("L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:", error);
    alert(`C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u: ${error.message}`);
  }
}

/**
 * G·∫Øn s·ª± ki·ªán 'submit' cho form ƒë·ªïi m·∫≠t kh·∫©u.
 */
const setupChangePasswordEvent = () => {
  const changePasswordForm = document.getElementById("changePasswordForm");
  if (changePasswordForm) {
    changePasswordForm.addEventListener("submit", handleChangePassword);
  }
};

/**
 * H√†m kh·ªüi t·∫°o cho trang accountDetail.html
 * C√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ DOMContentLoaded ho·∫∑c t·ª´ b√™n ngo√†i sau khi load qua AJAX
 */
async function initAccountPage() {
  if (document.getElementById("customerName")) {
    await loadAccountDetails(); // 1. ƒêi·ªÅn d·ªØ li·ªáu
    setupAddressEvents(); // 2. G·∫Øn s·ª± ki·ªán cho dropdown
    setupSaveButtonEvent(); // 3. G·∫Øn s·ª± ki·ªán cho n√∫t "L∆∞u"
  }

  if (document.getElementById("changePasswordForm")) {
    setupChangePasswordEvent(); // G·∫Øn s·ª± ki·ªán cho form ƒë·ªïi m·∫≠t kh·∫©u
  }
}

// Expose h√†m initAccountPage ra global ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ assets/script.js
window.initAccountPage = initAccountPage;

// -----------------------------------------------------------------------------
// KH·ªêI LOGIC CH√çNH: CH·ªà C√ì M·ªòT DOMCONTENTLOADED
// -----------------------------------------------------------------------------
document.addEventListener("DOMContentLoaded", () => {
  const sidebarLinks = document.querySelectorAll(".account-menu .menu-link");
  const contentArea = document.getElementById("accountContent");

  if (!sidebarLinks.length || !contentArea) {
    // Tr∆∞·ªùng h·ª£p ch·∫°y tr·ª±c ti·∫øp file accountDetail.html ho·∫∑c changePassword.html
    initAccountPage();

    return;
  }

  const loadContent = async (url) => {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);
      contentArea.innerHTML = await response.text();

      // QUAN TR·ªåNG: Sau khi t·∫£i HTML, m·ªõi g·ªçi c√°c h√†m ƒë·ªÉ th√™m ch·ª©c nƒÉng
      if (url.includes("accountDetail.html")) {
        await loadAccountDetails(); // 1. ƒêi·ªÅn d·ªØ li·ªáu
        setupAddressEvents(); // 2. G·∫Øn s·ª± ki·ªán cho dropdown
        setupSaveButtonEvent(); // 3. G·∫Øn s·ª± ki·ªán cho n√∫t "L∆∞u" (cho form)
      }
    } catch (error) {
      contentArea.innerHTML = `<p class="text-danger">L·ªói t·∫£i n·ªôi dung: ${error.message}</p>`;
    }
  };

  sidebarLinks.forEach((link) => {
    link.addEventListener("click", (event) => {
      event.preventDefault();
      const url = link.getAttribute("href");
      sidebarLinks.forEach((l) => l.classList.remove("active"));
      link.classList.add("active");
      loadContent(url);
    });
  });

  // T·ª± ƒë·ªông t·∫£i m·ª•c ƒë·∫ßu ti√™n khi v√†o trang
  if (sidebarLinks.length > 0) {
    sidebarLinks[0].click();
  }
});
