document.addEventListener("DOMContentLoaded", () => {
  console.log("üü¢ shipments-data.js loaded");

  // ===========================
  // Ki·ªÉm tra c·∫•u h√¨nh API
  // ===========================
  if (!window.API_CONFIG) {
    console.error("‚ùå API_CONFIG ch∆∞a load!");
    return;
  }

  const API_BASE_URL = window.API_CONFIG.BASE_URL;
  const getAccessToken = window.API_CONFIG.getAccessToken;

  // ===========================
  // Bi·∫øn DOM
  // ===========================
  const tableArea = document.querySelector(".table-area");
  const statItems = document.querySelectorAll(".summary-stats .stat-item");
  const tabItems = document.querySelectorAll(".tab-item, .dropdown-item");
  const mainActionsContainer = document.getElementById("mainActions");

  let orders = [];
  let currentStatus = "T·∫•t c·∫£";

  // ===========================
  // H√†m l·∫•y token h·ª£p l·ªá
  // ===========================
  function getValidToken() {
    let token = getAccessToken();
    if (!token) return null;
    if (token.startsWith("Bearer ")) token = token.slice(7);
    return token;
  }

  // ===========================
  // Load danh s√°ch ƒë∆°n h√†ng
  // ===========================
  async function loadOrders() {
    tableArea.innerHTML = `<p>ƒêang t·∫£i d·ªØ li·ªáu...</p>`;

    const token = getValidToken();
    const headers = { "Content-Type": "application/json" };
    if (token) headers["Authorization"] = `Bearer ${token}`;

    try {
      const res = await fetch(`${API_BASE_URL}/orders/get-all`, { headers });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();

      orders = data.result || [];
      console.log("‚úÖ ƒê√£ t·∫£i ƒë∆°n h√†ng:", orders);

      updateSummaryStats();
      updateTabsCount();
      renderTable(currentStatus);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch ƒë∆°n h√†ng:", err);
      tableArea.innerHTML = `<p>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu (m√£ l·ªói ${err.message})</p>`;
    }
  }

  // ===========================
  // C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng s·ªë
  // ===========================
  function updateSummaryStats() {
    const total = orders.length;
    const success = orders.filter((o) => o.status === "Giao th√†nh c√¥ng").length;
    const waiting = orders.filter((o) => o.status === "Ch·ªù l·∫•y").length;
    const cancelled = orders.filter((o) => o.status === "H·ªßy l·∫•y").length;
    const draft = orders.filter((o) => o.status === "ƒê∆°n nh√°p").length;

    statItems.forEach((item) => {
      const label = item.dataset.statusTarget;
      const count =
        label === "T·∫•t c·∫£"
          ? total
          : label === "L·∫•y th√†nh c√¥ng"
          ? success
          : label === "Ch·ªù l·∫•y"
          ? waiting
          : label === "H·ªßy l·∫•y"
          ? cancelled
          : label === "ƒê∆°n nh√°p"
          ? draft
          : 0;
      item.querySelector("b").textContent = `${count} ƒë∆°n`;
    });
  }

  // ===========================
  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ·ªü c√°c tab
  // ===========================
  function updateTabsCount() {
    tabItems.forEach((tab) => {
      const status = tab.dataset.status;
      const count =
        status === "T·∫•t c·∫£"
          ? orders.length
          : orders.filter((o) => o.status === status).length;

      const colorBox =
        tab.querySelector(".color-box")?.outerHTML ||
        `<span class="color-box"></span>`;
      const nameOnly = tab.textContent.replace(/\(.*\)/, "").trim();
      tab.innerHTML = `${colorBox} ${nameOnly} (${count})`;
    });
  }

  // ===========================
  // Hi·ªÉn th·ªã b·∫£ng ƒë∆°n h√†ng
  // ===========================
  function renderTable(status) {
    currentStatus = status;
    const list =
      status === "T·∫•t c·∫£"
        ? orders
        : orders.filter((o) => o.status === status);

    if (list.length === 0) {
      tableArea.innerHTML = `<p>Kh√¥ng c√≥ b·∫£n ghi n√†o</p>`;
      return;
    }

    const html = `
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>M√£ v·∫≠n ƒë∆°n</th>
            <th>Ng∆∞·ªùi g·ª≠i</th>
            <th>Ng∆∞·ªùi nh·∫≠n</th>
            <th>ƒê·ªãa ch·ªâ</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Ng√†y t·∫°o</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          ${list
            .map(
              (o, i) => `
            <tr data-code="${o.code}">
              <td>${i + 1}</td>
              <td>${o.code || "-"}</td>
              <td>${o.senderName || "-"}</td>
              <td>${o.receiverName || "-"}</td>
              <td>${o.receiverAddress || "-"}</td>
              <td>${o.status || "-"}</td>
              <td>${
                o.createdAt
                  ? new Date(o.createdAt).toLocaleDateString("vi-VN")
                  : "-"
              }</td>
              <td>
                <button class="btn-update" data-code="${o.code}">
                  <i class="fa-solid fa-pen"></i> C·∫≠p nh·∫≠t
                </button>
              </td>
            </tr>`
            )
            .join("")}
        </tbody>
      </table>
    `;
    tableArea.innerHTML = html;
  }

  // ===========================
  // Modal c·∫≠p nh·∫≠t tr·∫°ng th√°i
  // ===========================
  const modalHTML = `
    <div class="modal-overlay hidden" id="statusModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng</h2>
          <button class="close-btn" id="closeModalBtn">&times;</button>
        </div>
        <div class="modal-body">
          <p>Ch·ªçn tr·∫°ng th√°i m·ªõi cho ƒë∆°n h√†ng:</p>
          <select id="statusSelect">
            <option value="ƒê√£ ti·∫øp nh·∫≠n">ƒê√£ ti·∫øp nh·∫≠n</option>
            <option value="ƒêang l·∫•y h√†ng">ƒêang l·∫•y h√†ng</option>
            <option value="ƒê√£ l·∫•y h√†ng">ƒê√£ l·∫•y h√†ng</option>
            <option value="ƒêang v·∫≠n chuy·ªÉn">ƒêang v·∫≠n chuy·ªÉn</option>
            <option value="ƒêang giao h√†ng">ƒêang giao h√†ng</option>
            <option value="Giao th√†nh c√¥ng">Giao th√†nh c√¥ng</option>
            <option value="H·ªßy l·∫•y">H·ªßy l·∫•y</option>
            <option value="ƒê∆°n nh√°p">ƒê∆°n nh√°p</option>
          </select>
        </div>
        <div class="modal-footer">
          <button class="btn btn-confirm" id="confirmStatusBtn">X√°c nh·∫≠n</button>
          <button class="btn btn-cancel" id="cancelStatusBtn">H·ªßy</button>
        </div>
      </div>
    </div>
  `;
  document.body.insertAdjacentHTML("beforeend", modalHTML);

  const statusModal = document.getElementById("statusModal");
  const closeModalBtn = document.getElementById("closeModalBtn");
  const cancelStatusBtn = document.getElementById("cancelStatusBtn");
  const confirmStatusBtn = document.getElementById("confirmStatusBtn");
  const statusSelect = document.getElementById("statusSelect");

  let selectedOrder = null;

  function openModal(orderCode) {
    selectedOrder = orderCode;
    statusModal.classList.remove("hidden");
  }

  function closeModal() {
    selectedOrder = null;
    statusModal.classList.add("hidden");
  }

  closeModalBtn.addEventListener("click", closeModal);
  cancelStatusBtn.addEventListener("click", closeModal);

  confirmStatusBtn.addEventListener("click", async () => {
    if (!selectedOrder) return alert("Ch∆∞a ch·ªçn ƒë∆°n h√†ng!");
    const newStatus = statusSelect.value;
    const token = getValidToken();
    const headers = { "Content-Type": "application/json" };
    if (token) headers["Authorization"] = `Bearer ${token}`;

    try {
      const res = await fetch(
        `${API_BASE_URL}/orders/update-status/${selectedOrder}`,
        {
          method: "PUT",
          headers,
          body: JSON.stringify({ status: newStatus }),
        }
      );
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${selectedOrder} ‚Üí ${newStatus}`);
      closeModal();
      await loadOrders();
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  });

  // ===========================
  // S·ª± ki·ªán n√∫t / tab / b·∫£ng
  // ===========================
  tableArea.addEventListener("click", (e) => {
    if (e.target.closest(".btn-update")) {
      const orderCode = e.target.closest(".btn-update").dataset.code;
      openModal(orderCode);
    }
  });

  tabItems.forEach((tab) => {
    tab.addEventListener("click", (e) => {
      e.preventDefault();
      tabItems.forEach((t) => t.classList.remove("active"));
      tab.classList.add("active");
      renderTable(tab.dataset.status);
    });
  });

  statItems.forEach((item) => {
    item.addEventListener("click", () => {
      statItems.forEach((i) => i.classList.remove("active"));
      item.classList.add("active");
      renderTable(item.dataset.statusTarget);
    });
  });

  // ===========================
  // N√∫t l√†m m·ªõi
  // ===========================
  const refreshBtn = document.createElement("button");
  refreshBtn.className = "btn btn-refresh";
  refreshBtn.innerHTML = `<i class="fa-solid fa-rotate"></i> L√†m m·ªõi`;
  refreshBtn.addEventListener("click", loadOrders);
  mainActionsContainer.appendChild(refreshBtn);

  // ===========================
  // INIT
  // ===========================
  loadOrders();
});
